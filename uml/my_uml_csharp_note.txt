====================================
  OOP, UML and C# 
====================================

Association
-----------------

	- I have a relationship with an object. Foo uses Bar

	public class Foo 
	{
		void Baz(Bar bar) {} 
	};

	public class Bar
	{

	}


Composition 
-----------------
 	- I own an object and I am responsible for its lifetime, when Foo dies, so does Bar
 	- e.g., People and Leg

	public class Foo 
	{ 
		private Bar bar = new Bar(); 
	}


	public class Bar
	{

	}



Aggregation
-----------------
	- I have an object which I've borrowed from someone else. When Foo dies, Bar may live on.
	- e.g., Building and Address

	public class Foo 
	{ 
		private Bar bar; 

		Foo(Bar bar) 
		{
			this.bar = bar; 
		} 
	}


	public class Bar
	{

	}



Dependency
--------------------

	sign   -------->


	class A below uses class B in several ways:

 	class A
 	{	
 		public: B returns_a_B();
 		void has_a_B_argument(B); //method with arg B
 		void has_a_B_in_its_implementation(); // use B inside method
 	};



Dependency Injection
----------------------------

	Advantages

		- Loose coupling
		- Centralized configuration
		- Easily testable



	using System;


	public class Program
	{

	    static void Main(string[] args)
	    {
	        Customer customer1 = new Customer(new FileLogger());
	        Customer customer2 = new Customer(new SQLLogger());

	        customer1.WriteToLog("testing 1");
	        customer2.WriteToLog("testing 2");

	        Console.ReadKey();
	    }
	}

	public class Customer
	{
	    ILogger Logger;

	    public Customer(ILogger logger) //dependency inject through constructor
	    {
	        Logger = logger;
	    }

	    public void WriteToLog(string text)
	    {
	        Logger.WriteToLog(text);
	    }
	}

	public interface ILogger // dependency
	{
	    void WriteToLog(string text);
	}

	public class FileLogger : ILogger
	{
	    public void WriteToLog(string text)
	    {
	        Console.WriteLine("FileLogger {0}", text);
	    }
	}

	public class SQLLogger : ILogger
	{
	    public void WriteToLog(string text)
	    {
	        Console.WriteLine("SQLLogger {0}", text);
	    }
	}


Dependency vs Assoication
-------------------------------	

    http://nirajrules.wordpress.com/2011/07/15/association-vs-dependency-vs-aggregation-vs-composition/

    Dependency

	    class Die { public void Roll() { ... } }
		class Player
		{
			public void TakeTurn(Die die) /*Look ma, I am dependent on Die and it's Roll method to do my work*/
			{ 
				die.Roll(); ... 
			}
		}


	Association

		class Asset { ... }
		class Player 
		{
			Asset asset;
			public Player(Assest purchasedAsset) { ... } /*Set the asset via Constructor or a setter*/
		}		





Reference
1. 程式碼與 UML 類別_循序圖 的關係探討 (3)
--------------------------------------------------------------------
   http://kenming.blog.ithome.com.tw/category/296/510


2. Difference between association, aggregation and composition
-------------------------------------------------------------------- 
  http://stackoverflow.com/questions/885937/difference-between-association-aggregation-and-composition



3.设计模式基础:类及类关系的UML表示 
--------------------------------------------------------------------- 
 http://www.cnblogs.com/Roping/archive/2009/10/26/1590085.html


4. UML help C# Design Principles
----------------------------------------------------------------------
  http://stackoverflow.com/questions/6215388/uml-help-c-sharp-design-principles/6215517#6215517


5. Association, Aggregation, Composition, Abstraction, Generalization, Realization, Dependency
----------------------------------------------------------------------
 http://javapapers.com/oops/association-aggregation-composition-abstraction-generalization-realization-dependency/		